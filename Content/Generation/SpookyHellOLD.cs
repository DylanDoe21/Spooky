/*
using Terraria;
using Terraria.ID;
using Terraria.ModLoader;
using Terraria.WorldBuilding;
using Terraria.GameContent.Generation;
using Terraria.IO;
using System;
using System.Linq;
using System.Collections.Generic;

using Spooky.Core;
using Spooky.Content.Tiles.SpookyBiome;
using Spooky.Content.Tiles.SpookyHell;
using Spooky.Content.Tiles.SpookyHell.Ambient;
using Spooky.Content.Tiles.SpookyHell.Furniture;

namespace Spooky.Content.Generation
{
    public class SpookyHell : ModSystem
    {
        private int WillGen = 0;
        private int Noise;

        static int StartPosition = 250;

        private void GenerateSpookyHell(GenerationProgress progress, GameConfiguration configuration)
        {
            progress.Message = "Generating the eye valley";

            Random rand = new Random();

            //choose x-coordinate based on the same side of the dungeon
            if (Terraria.Main.dungeonX > Main.maxTilesX / 2)
			{
                StartPosition = Main.maxTilesX - 950;
			}
			else
			{
                StartPosition = 250;
			}
			
            int X = StartPosition;
            int XMiddle = X + 70;
            int XEdge = X + 700;

            //make the gen start at the bottom of the world
            for (int Y = Main.maxTilesY - 1; Y > Main.maxTilesY - 230; Y--)
            {
                //Y--; //subtract y because subtracting y is upward
                X = StartPosition;
                for (int x = 0; x < 770; x++)
                {
                    X++;
                    WillGen = 0;
                            
                    if (X < XMiddle - 1) 
                    {
                        Noise = XMiddle - X;
                        WillGen = WorldGen.genRand.Next(Noise);
                    }
                    if (X > XEdge + 1) 
                    {
                        Noise = X - XEdge;
                        WillGen = WorldGen.genRand.Next(Noise);
                    }
                    if (WillGen < 16) 
                    {
                        int[] Kill = { 13, 14 };

                        if (Kill.Contains(Main.tile[X, Y].WallType))
                        {
                            WorldGen.KillWall(X, Y);
                        }

                        if (Main.tile[X, Y].LiquidType == LiquidID.Lava && Y >= Main.maxTilesY - 130)
                        {
                            Tile newTile = Main.tile[X, Y];

                            newTile.ClearEverything();
                            WorldGen.PlaceTile(X, Y, ModContent.TileType<SpookyMush>());
                        }
                        if (Main.tile[X, Y].LiquidType == LiquidID.Lava && Y < Main.maxTilesY - 130)
                        {
                            Tile newTile = Main.tile[X, Y];

                            newTile.ClearEverything();
                        }
                    }

                    if (Main.tile[X, Y].HasTile) 
                    {
                        int[] AshReplace = { 57, 75, 76, ModContent.TileType<SpookyMush>() };
                        int[] OreReplace = { 58 };
                        int[] Kill = { 3, 21, 63, 64, 65, 66, 67, 68, 165, 233, 185, 186, 187, 192,
                        10, 11, 12, 14, 15, 16, 17, 18, 19, 26, 28, 31, 32, 33, 34, 42, 79, 86, 87, 88, 89, 90, 
                        91, 92, 93, 100, 101, 104, 105, 374 };

                        WillGen = 0;
                        
                        if (X < XMiddle - 1)
                        {
                            Noise = XMiddle - X;
                            WillGen = WorldGen.genRand.Next(Noise);
                        }
                        if (X > XEdge + 1) 
                        {
                            Noise = X - XEdge;
                            WillGen = WorldGen.genRand.Next(Noise);
                        }
                        if (WillGen < 16) 
                        {
                            //place spooky mush on the surface
                            if (AshReplace.Contains(Main.tile[X, Y].TileType) && Y <= Main.maxTilesY - 100) 
                            {
                                Main.tile[X, Y].TileType = (ushort)ModContent.TileType<SpookyMush>();
                            }
                            //place spooky rock in the "underground" part
                            if (AshReplace.Contains(Main.tile[X, Y].TileType) && Y > Main.maxTilesY - 100) 
                            {
                                Main.tile[X, Y].TileType = (ushort)ModContent.TileType<AcidRock>();

                                if (WorldGen.genRand.Next(2) == 0)
                                {
                                    Main.tile[X, Y - (WorldGen.genRand.Next(0, 5))].TileType = (ushort)ModContent.TileType<AcidRock>();
                                }
                            }
                            //place random spooky rock to blend the surface and underground layers
                            if (AshReplace.Contains(Main.tile[X, Y].TileType) && Y <= Main.maxTilesY - 100 && Y >= Main.maxTilesY - 105) 
                            {
                                if (WorldGen.genRand.Next(2) == 0)
                                {
                                    Main.tile[X, Y].TileType = (ushort)ModContent.TileType<AcidRock>();
                                }
                            }

                            //replace with acid rock
                            if (OreReplace.Contains(Main.tile[X, Y].TileType)) 
                            {
                                Main.tile[X, Y].TileType = (ushort)ModContent.TileType<SpookyMush>();
                            }

                            Tile newTile = Main.tile[X, Y];

                            //get rid of weird random tile sloping
                            newTile.Slope = 0;
                        }

                        //un-exist
                        if (Kill.Contains(Main.tile[X, Y].TileType)) 
                        {	
                            Main.tile[X, Y].HasTile.Equals(false);
                            WorldGen.KillTile(X, Y);
                        }
                    }
                }

                //Generate clumps of acid rock
                for (int Clumps = 0; Clumps < (int)((double)(Main.maxTilesX * Main.maxTilesY * 27) * 15E-05); Clumps++)
                {
                    int positionX = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
                    int positionY = WorldGen.genRand.Next(20, Main.maxTilesY - 20);

                    if (Main.tile[positionX, positionY].TileType == ModContent.TileType<SpookyMush>())
                    {
                        if (WorldGen.genRand.Next(200) == 0)
                        {
                            WorldGen.TileRunner(positionX, positionY, WorldGen.genRand.Next(15, 35), 
                            WorldGen.genRand.Next(15, 35), ModContent.TileType<AcidRock>(), false, 0f, 0f, false, true);
                        }
                    }
                }

                //Generate clumps of grass underground
                for (int Clumps = 0; Clumps < (int)((double)(Main.maxTilesX * Main.maxTilesY * 27) * 15E-05); Clumps++)
                {
                    int positionX = WorldGen.genRand.Next(20, Main.maxTilesX - 20);
                    int positionY = WorldGen.genRand.Next(20, Main.maxTilesY - 20);

                    if (Main.tile[positionX, positionY].TileType == ModContent.TileType<AcidRock>())
                    {
                        if (WorldGen.genRand.Next(200) == 0)
                        {
                            WorldGen.TileRunner(positionX, positionY, WorldGen.genRand.Next(10, 22), 
                            WorldGen.genRand.Next(10, 22), ModContent.TileType<SpookyMush>(), false, 0f, 0f, false, true);
                        }
                    }
                }
            }

            //these are for the big connecting tunnel positions
            //defining them here because the wall placing loop also uses them
            int TunnelX = XEdge - 350; //middle of the biome
            int TunnelY = Main.maxTilesY - 125;

            //places walls all along the bottom of the biome
			//note to self: DO NOT MESS WITH THESE VALUES, THEY ARE BASED ON THE EXACT SIZE OF THE BIOME
			for (int WallX = TunnelX - 300; WallX <= TunnelX + 370; WallX++)
			{
				for (int WallY = Main.maxTilesY - 1; WallY > Main.maxTilesY - 105; WallY--)
                {
					WorldGen.KillWall(WallX, WallY);
					WorldGen.PlaceWall(WallX, WallY, ModContent.WallType<AcidRockWall>());
                    //this is for placing randomized walls at the top of the main walls to make it transition nicely	
                    WorldGen.KillWall(WallX, Main.maxTilesY - 105 - WorldGen.genRand.Next(0, 5));
					WorldGen.PlaceWall(WallX, Main.maxTilesY - 105 - WorldGen.genRand.Next(0, 5), ModContent.WallType<AcidRockWall>());
				}
			}

            int NumRavines = 0;

            //gen ravines after everything else so they dont get nuked
            for (int i = Main.maxTilesY; i > Main.maxTilesY - 250; i--)
            {
                for (int Ravines = 0; Ravines < 100 && NumRavines < 7; Ravines++)
                {
                    int positionX = WorldGen.genRand.Next(XMiddle, XEdge);
                    int positionY = WorldGen.genRand.Next(Main.maxTilesY - 140, Main.maxTilesY - 130);

                    if (Main.tile[positionX, positionY].TileType == ModContent.TileType<AcidRock>())
                    {
                        SpookyWorldMethods.LargePit(positionX, positionY, WorldGen.genRand.Next(45, 50), (ushort)ModContent.TileType<AcidRock>(), 
                        (ushort)ModContent.TileType<SpookyMush>(), ModContent.WallType<SpookyMushWall>());

                        NumRavines++;
                    }
                }
            }

            //gen smaller tunnels after ravines
            for (int j = Main.maxTilesY; j > Main.maxTilesY - 250; j--)
            {
                //Generate small tunnels
                for (int SmallTunnels = 0; SmallTunnels < 50; SmallTunnels++)
                {
                    int positionX = WorldGen.genRand.Next(XMiddle, XEdge);
                    int positionY = WorldGen.genRand.Next(Main.maxTilesY - 90, Main.maxTilesY - 45);

                    if (Main.tile[positionX, positionY].TileType == ModContent.TileType<AcidRock>())
                    {
                        //Place small tunnels
                        if (WorldGen.genRand.Next(220) == 0)
                        {
                            SpookyWorldMethods.SmallTunnel(positionX, positionY, WorldGen.genRand.Next(18, 28), ModContent.TileType<SpookyMush>());
                        }
                    }
                }
            }
            
            SpookyWorldMethods.ConnectingTunnel(TunnelX, TunnelY, WorldGen.genRand.Next(175, 195));
        }

        //generate all of the microstructures for the eye biome surface
        private void PlaceStructures(int X, int Y, int[,] BlocksArray, int[,] LootArray)
        {
            for (int PlaceX = 0; PlaceX < BlocksArray.GetLength(1); PlaceX++)
            {
                for (int PlaceY = 0; PlaceY < BlocksArray.GetLength(0); PlaceY++)
                {
                    int StructureX = X - 3 + PlaceX;
                    int StructureY = Y - 6 + PlaceY;
                    if (WorldGen.InWorld(StructureX, StructureY, 30))
                    {
                        Tile tile = Framing.GetTileSafely(StructureX, StructureY);
                        switch (BlocksArray[PlaceY, PlaceX])
                        {
                            //kill tiles
                            case 0:
                            {
                                tile.ClearTile();
                                WorldGen.KillWall(StructureX, StructureY);
                                break;
                            }
                            //place bone block
                            case 1:
                            {
                                tile.ClearTile();
                                WorldGen.KillWall(StructureX, StructureY);
                                WorldGen.PlaceTile(StructureX, StructureY, TileID.BoneBlock);
                                tile.HasTile.Equals(true);
                                break;
                            }
                            //place spooky mush
                            case 2:
                            {
                                tile.ClearTile();
                                WorldGen.KillWall(StructureX, StructureY);
                                WorldGen.PlaceTile(StructureX, StructureY, ModContent.TileType<SpookyMush>());
                                tile.HasTile.Equals(true);
                                break;
                            }
                            //bone walls
                            case 3:
                            {
                                tile.ClearTile();
                                WorldGen.KillWall(StructureX, StructureY);
					            WorldGen.PlaceWall(StructureX, StructureY, WallID.Bone);
                                break;
                            }
                        }
                    }
                }
            }

            for (int PlaceX = 0; PlaceX < LootArray.GetLength(1); PlaceX++)
            {
                for (int PlaceY = 0; PlaceY < LootArray.GetLength(0); PlaceY++)
                {
                    int StructureX = X - 3 + PlaceX;
                    int StructureY = Y - 6 + PlaceY;
                    if (WorldGen.InWorld(StructureX, StructureY, 30))
                    {
                        Tile tile = Framing.GetTileSafely(StructureX, StructureY);
                        switch (LootArray[PlaceY, PlaceX])
                        {
                            //place campfires (probably will be replaced with something else)
                            case 4:
                            {
                                Framing.GetTileSafely(StructureX, StructureY).ClearTile();
                                WorldGen.PlaceObject(StructureX, StructureY, TileID.Campfire, true, 1);
                                break;
                            }
                            //place the egg
                            case 5:
                            {
                                Framing.GetTileSafely(StructureX, StructureY).ClearTile();
                                WorldGen.PlaceObject(StructureX, StructureY, ModContent.TileType<OrroboroEgg>());
                                break;
                            }
                        }
                    }
                }
            }
        }

        public void GenerateBoneStructures(GenerationProgress progress, GameConfiguration configuration)
        {   
            //0 = clear tile and walls
            //1 = place bone block
            //2 = place spooky mush
            //3 = bone walls
            //4 = bone campfire
            //5 = eye altar
            //6 = dont touch

            int[,] BoneAltarShape = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,2,2,1,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,2,1,1,2,2,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,2,1,1,2,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,3,3,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,3,3,3,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,1,2,2,1,1,1,0,0,0,3,3,0,0,3,3,3,3,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,1,1,1,1,1,1,3,0,0,3,3,0,0,3,3,3,3,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,1,1,2,2,2,1,1,1,1,1,3,0,0,3,3,3,3,3,3,3,3,3,3,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0},
                {6,6,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,1,1,1,1,3,3,0,0,3,3,3,3,3,3,3,3,3,3,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0},
                {6,6,1,1,1,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,1,1,1,1,1,3,3,0,3,3,3,3,3,3,3,3,3,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,6,6,6,0},
                {6,1,1,1,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,2,2,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,6,6,6,6,6},
                {6,1,1,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,2,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,6,6,6,6,6,6,6},
                {1,1,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,6,6,6,6,6,6,6,6},
                {1,1,1,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,6,6,6,6,6,6,6,6},
                {1,1,1,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,6,6,6,6,6,6,6,6},
                {1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,0,0,0,0,2,2,1,1,1,1,6,6,6,6,6,6,6,6},
                {1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,6,6,6,6},
                {2,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2},
                {2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,3,3,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,1,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6},
                {6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6,2,2,2,6,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,6,6,6},
            };

            int[,] BoneAltarObjects = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,2,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,2,2,1,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,2,1,1,2,2,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,2,1,1,2,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,0,3,3,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,3,3,3,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,2,1,2,2,1,1,1,0,0,0,3,3,0,0,3,3,3,3,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,1,1,1,1,1,1,3,0,0,3,3,0,0,3,3,3,3,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,1,1,2,2,2,1,1,1,1,1,3,0,0,3,3,3,3,3,3,3,3,3,3,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0},
                {6,6,0,1,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,1,1,1,1,3,3,0,0,3,3,3,3,3,3,3,3,3,3,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0},
                {6,6,1,1,1,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,1,1,1,1,1,3,3,0,3,3,3,3,3,3,3,3,3,1,1,1,1,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,6,6,6,0},
                {6,1,1,1,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,2,2,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,6,6,6,6,6},
                {6,1,1,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,2,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,6,6,6,6,6,6,6},
                {1,1,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,6,6,6,6,6,6,6,6},
                {1,1,1,0,0,0,0,0,0,0,4,0,2,2,2,2,2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,6,6,6,6,6,6,6,6},
                {1,1,1,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,2,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,6,6,6,6,6,6,6,6},
                {1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,0,4,0,0,2,2,1,1,1,1,6,6,6,6,6,6,6,6},
                {1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,6,6,6,6},
                {2,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2},
                {2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,3,3,3,3,5,3,3,3,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,2,2,1,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,1,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6},
                {6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6,2,2,2,6,2,2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,2,6,6,6,6,6,6,6,6,6,6,6,6},
            };

            //big bone spines
            int[,] BigBoneShape1 = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
                {0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
                {0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,3,0,0,1,1,1,0,0,0,0,0,0,0},
                {0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,3,0,0,1,1,1,0,0,0,0,0,0,0},
                {0,0,1,1,0,0,0,0,1,1,1,0,0,3,0,0,0,3,0,0,0,1,1,1,0,0,6,6,6,0},
                {6,6,1,1,1,0,0,0,1,1,1,3,0,3,3,0,0,3,3,0,0,1,1,1,6,6,6,6,6,6},
                {6,6,1,1,1,0,0,0,1,1,1,3,3,3,3,3,3,3,3,0,3,1,1,1,6,6,6,6,6,6},
                {6,6,6,1,1,1,0,0,1,1,1,1,1,3,3,3,3,3,3,3,3,1,1,1,6,6,6,6,6,6},
                {6,6,6,1,1,1,1,2,1,1,1,1,1,3,3,3,3,3,3,3,1,1,1,2,6,6,6,6,6,6},
                {6,2,2,1,1,1,1,2,2,1,1,1,1,3,3,3,3,3,3,3,1,1,1,2,2,6,6,6,6,6},
                {2,2,2,2,1,1,2,2,2,1,1,1,3,3,3,3,3,3,3,1,1,1,1,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,1,1,1,1,3,3,3,3,3,3,3,1,1,1,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,1,1,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,1,1,1,1,3,3,3,1,1,1,1,2,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,6},
                {6,6,2,2,2,2,2,2,2,1,1,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,6,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,6,6,6},
                {6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,6,6,6,6,6,6,2,2,2,6,6,6,6},
            };

            int[,] BigBoneObjects1 = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
                {0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
                {0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,0,0,3,0,0,1,1,1,0,0,0,0,0,0,0},
                {0,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,3,0,0,1,1,1,0,0,0,0,0,0,0},
                {0,0,1,1,0,0,0,0,1,1,1,0,0,3,0,0,0,3,0,0,0,1,1,1,0,0,6,6,6,0},
                {6,6,1,1,1,0,0,0,1,1,1,3,0,3,3,0,0,3,3,0,0,1,1,1,6,6,6,6,6,6},
                {6,6,1,1,1,0,0,0,1,1,1,3,3,3,3,3,3,3,3,0,3,1,1,1,6,6,6,6,6,6},
                {6,6,6,1,1,1,0,0,1,1,1,1,1,3,3,3,3,3,3,3,3,1,1,1,6,6,6,6,6,6},
                {6,6,6,1,1,1,1,2,1,1,1,1,1,3,3,3,3,3,3,3,1,1,1,2,6,6,6,6,6,6},
                {6,2,2,1,1,1,1,2,2,1,1,1,1,3,3,3,3,3,3,3,1,1,1,2,2,6,6,6,6,6},
                {2,2,2,2,1,1,2,2,2,1,1,1,3,3,3,3,3,3,3,1,1,1,1,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,1,1,1,1,3,3,3,3,3,3,3,1,1,1,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,1,1,3,3,3,3,3,1,1,1,1,1,1,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,1,1,1,1,3,4,3,1,1,1,1,2,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,6},
                {6,6,2,2,2,2,2,2,2,1,1,2,2,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,6,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2,2,6,6,6},
                {6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,6,6,6,6,6,6,2,2,2,6,6,6,6},
            };

            int[,] BigBoneShape2 = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,6,6,0},
                {0,6,6,6,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,6,6,6,6},
                {6,6,6,6,6,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,6,6,6,6},
                {6,6,6,6,6,6,0,0,0,0,0,2,2,1,1,1,1,2,2,0,0,0,0,1,1,1,6,6,6,6},
                {6,6,6,6,6,6,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,1,1,1,6,6,6,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,1,1,1,1,2,2,6},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6},
                {6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,6,6,6,6,6,6,2,2,2,6,6,6,6},
            };

            int[,] BigBoneObjects2 = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,6,6,0},
                {0,6,6,6,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,6,6,6,6},
                {6,6,6,6,6,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,6,6,6,6},
                {6,6,6,6,6,6,0,0,4,0,0,2,2,1,1,1,1,2,2,0,0,0,0,1,1,1,6,6,6,6},
                {6,6,6,6,6,6,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,1,1,1,6,6,6,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,1,1,1,1,2,2,6},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,2,2},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6},
                {6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6},
                {6,6,6,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,2,2,2,2,2,6,6,6,6,6,6,2,2,2,6,6,6,6},
            };

            //small bone spikes
            int[,] SmallBoneShape1 = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0},
                {0,6,6,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0},
                {6,6,6,6,6,0,0,0,1,1,1,1,0,0,0,6,6,6,0},
                {6,6,6,6,6,6,0,0,1,1,1,0,0,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,1,1,1,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,1,1,1,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,1,1,1,1,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,1,1,1,6,6,6,6,6,6,6},
                {6,6,6,6,6,2,2,6,2,1,1,1,1,6,6,6,6,6,6},
                {6,6,6,6,6,2,2,2,2,2,1,1,1,6,6,6,6,6,6},
                {6,2,2,6,2,2,2,2,2,2,1,1,1,2,6,6,2,2,6},
                {2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,6},
                {2,2,2,2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6},
                {6,2,2,6,6,2,2,2,2,2,2,2,2,2,2,2,6,6,6},
                {6,6,6,6,6,6,6,2,2,2,6,6,2,2,2,6,6,6,6},
            };

            int[,] SmallBoneShape2 = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
                {0,6,6,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0},
                {6,6,6,6,0,0,0,1,1,1,1,0,0,0,0,0,6,6,0},
                {6,6,6,6,6,0,0,0,1,1,1,0,0,0,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,1,1,1,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,1,1,1,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,1,1,1,1,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,1,1,1,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,1,1,1,1,2,6,2,2,6,6,6,6,6},
                {6,6,6,6,6,6,1,1,1,2,2,2,2,2,6,6,6,6,6},
                {6,2,2,6,6,2,1,1,1,2,2,2,2,2,2,6,2,2,6},
                {6,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,1,1,1,1,2,2,2,2,2,2,2,2,2},
                {2,2,2,2,2,2,2,1,1,2,2,2,2,2,2,2,2,2,2},
                {6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6},
                {6,6,6,2,2,2,2,2,2,2,2,2,2,2,6,6,2,2,6},
                {6,6,6,6,2,2,2,6,6,2,2,2,6,6,6,6,6,6,6},
            };

            int[,] SmallBoneObjects = new int[,]
            {
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
                {6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6},
            };

            int AltarX = StartPosition + 370;
            int AltarY = (int)Main.maxTilesY - 147;

            PlaceStructures(AltarX, AltarY, BoneAltarShape, BoneAltarObjects);

            PlaceStructures(AltarX - WorldGen.genRand.Next(150, 200), AltarY + 2, BigBoneShape1, BigBoneObjects1);
            PlaceStructures(AltarX + WorldGen.genRand.Next(150, 200), AltarY + 2, BigBoneShape2, BigBoneObjects2);

            PlaceStructures(AltarX - WorldGen.genRand.Next(100, 125), AltarY + 3, SmallBoneShape1, SmallBoneObjects);
            PlaceStructures(AltarX - WorldGen.genRand.Next(250, 275), AltarY + 3, SmallBoneShape2, SmallBoneObjects);
            PlaceStructures(AltarX - WorldGen.genRand.Next(285, 300), AltarY + 3, SmallBoneShape1, SmallBoneObjects);

            PlaceStructures(AltarX + WorldGen.genRand.Next(100, 125), AltarY + 3, SmallBoneShape2, SmallBoneObjects);
            PlaceStructures(AltarX + WorldGen.genRand.Next(250, 275), AltarY + 3, SmallBoneShape1, SmallBoneObjects);
            PlaceStructures(AltarX + WorldGen.genRand.Next(285, 300), AltarY + 3, SmallBoneShape2, SmallBoneObjects);
        }

        //specific case for bone chest chambers
        private void PlaceBoneChests(int X, int Y, int[,] BlocksArray, int[,] LootArray)
        {
            for (int PlaceX = 0; PlaceX < BlocksArray.GetLength(1); PlaceX++)
            {
                for (int PlaceY = 0; PlaceY < BlocksArray.GetLength(0); PlaceY++)
                {
                    int StructureX = X - 3 + PlaceX;
                    int StructureY = Y - 6 + PlaceY;
                    if (WorldGen.InWorld(StructureX, StructureY, 30))
                    {
                        Tile tile = Framing.GetTileSafely(StructureX, StructureY);
                        switch (BlocksArray[PlaceY, PlaceX])
                        {
                            //dont touch
                            case 0:
                            {
                                break;
                            }
                            //place bone block
                            case 1:
                            {
                                tile.ClearTile();
                                WorldGen.PlaceTile(StructureX, StructureY, TileID.BoneBlock);
                                tile.HasTile.Equals(true);
                                break;
                            }
                            //bone walls
                            case 2:
                            {
                                tile.ClearTile();
                                WorldGen.KillWall(StructureX, StructureY);
					            WorldGen.PlaceWall(StructureX, StructureY, WallID.Bone);
                                break;
                            }
                        }
                    }
                }
            }

            for (int PlaceX = 0; PlaceX < LootArray.GetLength(1); PlaceX++)
            {
                for (int PlaceY = 0; PlaceY < LootArray.GetLength(0); PlaceY++)
                {
                    int StructureX = X - 3 + PlaceX;
                    int StructureY = Y - 6 + PlaceY;
                    if (WorldGen.InWorld(StructureX, StructureY, 30))
                    {
                        Tile tile = Framing.GetTileSafely(StructureX, StructureY);
                        switch (LootArray[PlaceY, PlaceX])
                        {
                            //place eye chest
                            case 3:
                            {
                                Framing.GetTileSafely(StructureX, StructureY).ClearTile();
                                WorldGen.PlaceChest(StructureX, StructureY, (ushort)ModContent.TileType<EyeValleyChest>(), true, 1);
                                break;
                            }
                        }
                    }
                }
            }
        }

        public void GenerateChestChambers(GenerationProgress progress, GameConfiguration configuration)
        {   
            //0 = dont touch
            //1 = place bone block
            //2 = place bone walls
            //3 = valley chest

            //chest chambers for the underground area
            int[,] ChestRoom1 = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
                {0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0},
                {0,0,1,1,1,0,0,0,0,0,0,0,0,2,2,0,0,0,1,1,1,0,0,0},
                {0,0,0,1,1,1,0,0,0,0,0,0,0,2,2,2,0,0,1,1,0,0,0,0},
                {0,0,0,1,1,1,0,0,0,0,0,0,0,2,2,2,0,0,1,1,0,0,0,0},
                {0,0,1,1,1,1,0,0,2,2,0,0,0,2,2,2,0,0,1,1,1,0,0,0},
                {0,0,1,1,1,0,0,0,2,2,0,0,0,2,2,2,0,0,1,1,1,0,0,0},
                {0,0,1,1,1,0,0,2,2,2,0,0,2,2,2,2,2,0,2,1,1,1,0,0},
                {0,0,1,1,1,1,0,2,2,2,2,0,2,2,2,2,2,2,2,1,1,1,0,0},
                {0,0,1,1,1,1,2,2,2,2,2,0,2,2,2,2,2,2,1,1,1,1,0,0},
                {0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0},
                {0,0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0},
                {0,0,1,1,1,1,2,2,1,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0},
                {0,0,1,1,1,2,2,2,1,1,2,2,2,2,2,2,2,2,1,1,1,0,0,0},
                {0,1,1,1,1,2,2,2,1,1,2,2,2,2,2,1,2,2,1,1,1,1,0,0},
                {0,1,1,1,1,1,2,1,1,1,2,2,2,2,1,1,2,1,1,1,1,1,0,0},
                {0,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,0},
                {0,0,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,0},
                {0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,0,0},
                {0,0,0,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,0,0,0,0},
                {0,0,0,0,0,0,1,1,1,1,2,2,1,1,1,1,1,1,1,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,1,2,1,1,1,1,1,1,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,1,2,2,1,1,1,1,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,1,1,1,1,1,1,2,2,1,1,1,1,0,0,0,0,0,0},
                {0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0},
                {0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0},
                {0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0},
                {0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0},
                {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
                {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
                {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
            };

            int[,] ChestRoom2 = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0},
                {1,1,1,1,0,0,0,2,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0},
                {1,1,1,0,0,0,0,2,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0},
                {1,1,1,0,0,0,2,2,2,0,2,0,1,1,0,0,0,0,0,1,1,1,0,0},
                {1,1,1,0,0,0,2,2,2,0,2,1,1,1,0,0,0,0,0,1,1,1,0,0},
                {1,1,1,1,0,0,2,2,2,2,2,1,1,1,0,0,0,0,1,1,1,0,0,0},
                {1,1,1,1,0,2,2,2,2,2,2,1,1,1,1,0,0,0,1,1,1,0,0,0},
                {0,1,1,1,1,2,2,2,2,2,2,2,1,1,1,0,0,0,1,1,1,0,0,0},
                {0,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,0,0,1,1,1,1,0,0},
                {0,1,1,1,1,1,2,1,1,2,2,2,2,1,1,1,0,1,1,1,1,1,0,0},
                {0,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,0},
                {0,0,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,0},
                {0,0,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,0,0},
                {0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,0,0,0,0},
                {0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,1,1,1,1,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,1,1,1,2,1,1,1,1,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,1,1,2,2,1,1,1,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,1,1,1,1,1,1,2,1,1,1,1,1,0,0,0,0,0,0},
                {0,0,0,0,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0},
                {0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0},
                {0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0},
                {0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0},
                {0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,0,0,0,0},
                {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            };

            int[,] ChestRoom3 = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0},
                {0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0},
                {0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,2,0,0,0,1,1,1,1},
                {0,0,1,1,0,0,0,0,0,1,1,1,0,0,0,0,2,0,0,0,0,1,1,1},
                {0,0,1,1,1,0,0,0,0,0,1,1,0,2,0,2,2,2,0,0,0,1,1,1},
                {0,0,1,1,1,0,0,0,0,0,1,1,1,2,0,2,2,2,0,0,0,1,1,1},
                {0,0,0,1,1,1,0,0,0,0,1,1,1,2,2,2,2,2,0,0,1,1,1,1},
                {0,0,0,1,1,1,0,0,0,1,1,1,1,2,2,2,2,2,2,0,1,1,1,1},
                {0,0,0,1,1,1,0,0,0,1,1,1,2,2,2,2,2,2,2,1,1,1,1,0},
                {0,0,1,1,1,1,0,0,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,0},
                {0,0,1,1,1,1,1,0,1,1,1,2,2,2,2,1,1,2,1,1,1,1,1,0},
                {0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,0},
                {0,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,0,0},
                {0,0,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,0,0},
                {0,0,0,0,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0},
                {0,0,0,0,0,1,1,1,1,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0},
                {0,0,0,0,0,0,1,1,1,1,2,1,1,1,1,1,1,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,2,2,1,1,1,1,1,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,1,1,1,1,1,2,1,1,1,1,1,1,0,0,0,0,0,0},
                {0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,0,0,0,0},
                {0,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0},
                {0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0},
                {0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0},
                {0,0,0,0,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0},
                {0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
                {0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            };

            int[,] ChestRoom4 = new int[,]
            {
                {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
                {0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0},
                {0,0,1,1,1,0,0,0,2,2,0,0,0,0,0,0,0,0,1,1,1,0,0,0},
                {0,0,0,1,1,0,0,2,2,2,0,0,0,0,0,0,0,1,1,1,0,0,0,0},
                {0,0,0,1,1,0,0,2,2,2,0,0,0,0,0,0,0,1,1,1,0,0,0,0},
                {0,0,1,1,1,0,0,2,2,2,0,0,0,2,2,0,0,1,1,1,1,0,0,0},
                {0,0,1,1,1,0,0,2,2,2,0,0,0,2,2,0,0,0,1,1,1,0,0,0},
                {0,1,1,1,2,0,2,2,2,2,2,0,0,2,2,2,0,0,1,1,1,0,0,0},
                {0,1,1,1,2,2,2,2,2,2,2,0,2,2,2,2,0,1,1,1,1,0,0,0},
                {0,1,1,1,1,2,2,2,2,2,2,0,2,2,2,2,2,1,1,1,1,0,0,0},
                {0,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0},
                {0,0,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,0,0,0,0},
                {0,0,1,1,1,2,2,2,2,2,2,2,2,2,1,2,2,1,1,1,1,0,0,0},
                {0,0,1,1,1,2,2,2,2,2,2,2,2,1,1,2,2,2,1,1,1,0,0,0},
                {0,1,1,1,1,2,2,1,2,2,2,2,2,1,1,2,2,2,1,1,1,1,0,0},
                {0,1,1,1,1,1,2,1,1,2,2,2,2,1,1,1,2,1,1,1,1,1,0,0},
                {1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,0,0},
                {1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,0,0,0},
                {0,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,0,0,0},
                {0,0,0,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0},
                {0,0,0,0,1,1,1,1,1,1,1,2,2,1,1,1,1,0,0,0,0,0,0,0},
                {0,0,0,0,0,1,1,1,1,1,1,2,1,1,1,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,1,1,1,1,2,2,1,1,1,1,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,1,1,1,1,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0},
                {0,0,0,0,1,1,1,1,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0,0},
                {0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0},
                {0,0,0,1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0},
                {0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,0,0,0,0},
                {0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0},
                {0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0},
                {0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0},
            };

            int[,] ChestRoomChest = new int[,]
            {
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
                {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
            };
        
            //the middle of the underground
            int ChestX = StartPosition + 370;
            int ChestY = (int)Main.maxTilesY - 85;

            PlaceBoneChests(ChestX - 210, ChestY, ChestRoom1, ChestRoomChest);
            PlaceBoneChests(ChestX - 110, ChestY, ChestRoom2, ChestRoomChest);
            PlaceBoneChests(ChestX + 110, ChestY, ChestRoom3, ChestRoomChest);
            PlaceBoneChests(ChestX + 210, ChestY, ChestRoom4, ChestRoomChest);
        }

        public static void SpookyHellTrees(GenerationProgress progress, GameConfiguration configuration)
        {
            progress.Message = "Growing eye stalks";

            //grow eye trees
            for (int X = StartPosition + 70; X < StartPosition + 700; X++)
            {
                for (int Y = Main.maxTilesY - 200; Y < Main.maxTilesY - 1; Y++)
                {
                    if (Main.tile[X, Y].TileType == (ushort)ModContent.TileType<SpookyMush>())
                    {
                        if (WorldGen.genRand.Next(12) == 0)
                        {
                            WorldGen.GrowPalmTree(X, Y - 1);
                        }
                    }
                }
            }
        }

        public static void SpookyHellAmbience(GenerationProgress progress, GameConfiguration configuration)
        {
            progress.Message = "Polishing the eye valley";

            //clear any left over lava
            for (int ClearX = StartPosition + 70; ClearX < StartPosition + 700; ClearX++)
            {
                for (int ClearY = Main.maxTilesY - 200; ClearY < Main.maxTilesY; ClearY++)
                {
                    if (Main.tile[ClearX, ClearY].LiquidType == LiquidID.Lava)
                    {
                        Tile newTile = Main.tile[ClearX, ClearY];

                        newTile.LiquidType = 5;
                        newTile.ClearEverything();
                    }
                }
            }

            //tile sloping and ambient objects
            for (int ObjectX = StartPosition + 70; ObjectX < StartPosition + 700; ObjectX++)
            {
                for (int ObjectY = Main.maxTilesY - 200; ObjectY < Main.maxTilesY; ObjectY++)
                {
                    //tile sloping
                    if (Main.tile[ObjectX, ObjectY].TileType == (ushort)ModContent.TileType<SpookyMush>() || 
                    Main.tile[ObjectX, ObjectY].TileType == (ushort)ModContent.TileType<AcidRock>() ||
                    Main.tile[ObjectX, ObjectY].TileType == TileID.BoneBlock)
                    {
                        Tile.SmoothSlope(ObjectX, ObjectY);
                    }

                    //ambient objects 
                    if (Main.tile[ObjectX, ObjectY].TileType == ModContent.TileType<SpookyMush>())
                    {
                        //small eyes
                        if (WorldGen.genRand.Next(20) == 0)
                        {    
                            ushort[] Eyes = new ushort[] { (ushort)ModContent.TileType<EyeTiny1>(), (ushort)ModContent.TileType<EyeTiny2>(),
                            (ushort)ModContent.TileType<EyeSmall1>(), (ushort)ModContent.TileType<EyeSmall2>(), (ushort)ModContent.TileType<EyeTall1>(), 
                            (ushort)ModContent.TileType<EyeTall2>(), (ushort)ModContent.TileType<EyeTall3>() };

                            WorldGen.PlaceObject(ObjectX, ObjectY - 1, WorldGen.genRand.Next(Eyes));      
                        }

                        //mouth plants
                        if (WorldGen.genRand.Next(30) == 0)
                        {    
                            ushort[] MiscPlants = new ushort[] { (ushort)ModContent.TileType<Mouth1>(), (ushort)ModContent.TileType<Mouth2>(), 
                            (ushort)ModContent.TileType<Mushroom1>(), (ushort)ModContent.TileType<Mushroom2>() };

                            WorldGen.PlaceObject(ObjectX, ObjectY - 1, WorldGen.genRand.Next(MiscPlants));      
                        }

                        //hanging eyes
                        if (WorldGen.genRand.Next(15) == 0)
                        {    
                            ushort[] HangingEyes = new ushort[] { (ushort)ModContent.TileType<EyeHanging1>(), (ushort)ModContent.TileType<EyeHanging2>() };

                            WorldGen.PlaceObject(ObjectX, ObjectY + 1, WorldGen.genRand.Next(HangingEyes));      
                        }

                        //hanging tendrils
                        if (WorldGen.genRand.Next(20) == 0)
                        {    
                            ushort[] HangingTendrils = new ushort[] { (ushort)ModContent.TileType<HangingTendril1>(), 
                            (ushort)ModContent.TileType<HangingTendril2>(), (ushort)ModContent.TileType<HangingTendril3>() };

                            WorldGen.PlaceObject(ObjectX, ObjectY + 1, WorldGen.genRand.Next(HangingTendrils));    
                        }
                    }
                    
                    //tentacles
                    if (Main.tile[ObjectX, ObjectY].TileType == ModContent.TileType<AcidRock>())
                    {
                        if (WorldGen.genRand.Next(15) == 0)
                        {    
                            ushort[] Tentacles = new ushort[] { (ushort)ModContent.TileType<TentaclePile1>(), (ushort)ModContent.TileType<TentaclePile2>(), 
                            (ushort)ModContent.TileType<TentacleSmall1>(), (ushort)ModContent.TileType<TentacleSmall2>() };

                            WorldGen.PlaceObject(ObjectX, ObjectY - 1, WorldGen.genRand.Next(Tentacles)); 
                        }
                    }

                    //get rid of random floating singular tiles
                    if (Main.tile[ObjectX, ObjectY].TileType == ModContent.TileType<SpookyMush>() ||
                    Main.tile[ObjectX, ObjectY].TileType == ModContent.TileType<AcidRock>())
                    {
                        if (!Main.tile[ObjectX, ObjectY - 1].HasTile && !Main.tile[ObjectX, ObjectY + 1].HasTile &&
                        !Main.tile[ObjectX - 1, ObjectY].HasTile && !Main.tile[ObjectX + 1, ObjectY].HasTile)
                        {
                            WorldGen.KillTile(ObjectX, ObjectY);
                        }
                    }
                }
            }
        }

        public override void ModifyWorldGenTasks(List<GenPass> tasks, ref float totalWeight)
		{
            int SpookyHellIndex = tasks.FindIndex(genpass => genpass.Name.Equals("Final Cleanup"));
			if (SpookyHellIndex == -1)
			{
				return;
			}

            tasks.Insert(SpookyHellIndex + 1, new PassLegacy("SpookyHell", GenerateSpookyHell));
            tasks.Insert(SpookyHellIndex + 2, new PassLegacy("SpookyHellAltar", GenerateBoneStructures));
            tasks.Insert(SpookyHellIndex + 3, new PassLegacy("SpookyHellChamber", GenerateChestChambers));
            tasks.Insert(SpookyHellIndex + 4, new PassLegacy("SpookyHellTrees", SpookyHellTrees));
            tasks.Insert(SpookyHellIndex + 5, new PassLegacy("SpookyHellAmbience", SpookyHellAmbience));
            tasks.Insert(SpookyHellIndex + 6, new PassLegacy("SpookyHellAmbience", SpookyHellAmbience));
            tasks.Insert(SpookyHellIndex + 7, new PassLegacy("SpookyHellAmbience", SpookyHellAmbience));
		}
    }
}
*/